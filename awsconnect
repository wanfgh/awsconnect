#!/usr/bin/env python

import boto.ec2
import argparse
import configparser
import os
import re
import sys
import subprocess

class SshConnect():
    """ A plugin to connect to instances through ssh """
    def __init__(self):
        self._config = configparser.ConfigParser()
        try:
            home = os.getenv("HOME")
            if os.path.exists('%s/.aws/config.ini' % home):
                self._config.read('%s/.aws/config.ini' % home)
            elif os.path.exists('config.ini'):
                self._config.read('config.ini')
            else:
                print "Configuration file doesn't exists. Please, find an example on https://github.com/alanbover/awsconnect. Exiting..."
                exit(1)
        except Exception as error:
            print "Error loading the config file"
            print error
            exit(1)
        pass

    def connect(self, _args):
        """ Connects to the desired host """

        # Parse options
        parser = argparse.ArgumentParser(description='List the existing stacks')
        parser.add_argument('-e', '--environment', default='default', help='Define the environment to use')
        parser.add_argument('-u', '--user', default='ec2-user', help='Define the user to connect')
        parser.add_argument('-p', '--pattern', default='', help='Connect only to host with match with pattern')

        args = parser.parse_args(_args)

        environment = args.environment
        user = args.user

        try:
            region = self._config[environment]['region']
            access_key = self._config[environment]['access_key']
            secret_key = self._config[environment]['secret_key']
            if 'private_key' in self._config[environment]:
              private_key = self._config[environment]['private_key']
            else:
              private_key = None
        except Exception as error:
            print "Cannot retrieve environment properties. Please, check the properties file is correctly configured"
            print error
            exit(1)

        try:
            ec2Connection = boto.ec2.connect_to_region(region, aws_access_key_id=access_key, aws_secret_access_key=secret_key)
        except Exception as error:
            print "Not able to connect to region %s with key %s" % (region, access_key)
            print error
            exit(1)

        sorted_instances = self.__get_sorted_instances(ec2Connection)

        try:
          if private_key != None:
            subprocess.call('ssh-add -D', shell=True)
            subprocess.call('ssh-add %s' % private_key, shell=True)
        except Exception as error:
          print "Error when accessing to the private key"
          print error
          exit(1)

        if args.pattern:
          self.__cluster_connect_tmux_cssh(sorted_instances, args.pattern, private_key, user)
          exit(0)

        print "Instances running:\n"

        for index in range(len(sorted_instances)):
	        print "[%i]\t %s\t\t\t %s" % (index, sorted_instances[index]['name'], sorted_instances[index]['dns'])

        try:
          instance_to_connect = raw_input("\nPlease, insert the instance id or a pattern to connect: ")

          if not str(instance_to_connect).isdigit():
            self.__cluster_connect_tmux_cssh(sorted_instances, instance_to_connect, private_key, user)
            exit(0)
          if int(instance_to_connect) not in range(len(sorted_instances)):
            print "Instance id not valid"
            exit(0)
        except Exception as error:
          print "Instance id not valid"
          print error
          exit(1)

        if private_key != None:
          subprocess.call('ssh-add -D', shell=True)
          subprocess.call('ssh-add %s' % private_key, shell=True)
        subprocess.call('/usr/bin/ssh -l %s %s' % (user, sorted_instances[int(instance_to_connect)]['dns']), shell=True)

    def __cluster_connect_cssh(self, sorted_instances, pattern, private_key, user):
      hosts_to_connect = ""
      for instance in sorted_instances:
          if re.search(pattern, instance['name']):
              hosts_to_connect = hosts_to_connect + " " + user + "@%s" % instance['dns']
      subprocess.call('/usr/bin/cssh -l ec2-user %s' % hosts_to_connect, shell=True)

    def __cluster_connect_tmux_cssh(self, sorted_instances, pattern, private_key, user):
      hosts_to_connect = ""
      for instance in sorted_instances:
          if re.search(pattern, instance['name']):
              hosts_to_connect = hosts_to_connect + " --sc " + instance['dns']
      subprocess.call('/usr/local/bin/tmux-cssh -u ec2-user %s' % hosts_to_connect, shell=True)

    def __get_sorted_instances(self, ec2Connection):

        instances = []

        try:
            for reservation in ec2Connection.get_all_reservations():
                for instance in reservation.instances:
                    try:
                      if instance._state.name == 'running':
                          instances.append({ 'name': instance.tags['Name'] + "(" + instance.id + ")", 'dns': instance.public_dns_name})
                    except:
                          instances.append({ 'name': 'noname' + "(" + instance.id + ")", 'dns': instance.public_dns_name})

        except Exception as error:
            print "Error retrieving ec2 instances"
            print error

        sorted_instances = sorted(instances, key=lambda k: k['name'])
        return sorted_instances


if __name__ == "__main__":
  sshConnect = SshConnect()
  sshConnect.connect(sys.argv[1:])
